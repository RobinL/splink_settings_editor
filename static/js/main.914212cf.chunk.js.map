{"version":3,"sources":["components/MonacoWindow.js","components/SelectSettings.js","components/InfoPanel.js","data/all_example_settings.js","App.js","index.js"],"names":["EditorContainer","props","id","style","width","height","MonacoWindow","url","p1","p2","fetch","then","res","json","Promise","all","data","monaco","my_schema","text_value","editor_contents_string","modelUri","Uri","parse","model","editor","createModel","languages","jsonDefaults","setDiagnosticsOptions","validate","schemas","uri","fileMatch","toString","schema","create","document","getElementById","value","language","prevProps","this","setValue","className","Component","SelectSettings","key","all_settings","text","selected_option","selected","all_example_settings","keys","Object","htmlFor","onChange","map","renderOption","InfoPanel","selection","React","App","handleChange","event","settings_id","target","setState","option_selection","state","bind","settings_dict","JSON","stringify","editor_text","getTextFromId","select_select_id","ReactDOM","render"],"mappings":"iUAKaA,G,cAAkB,SAACC,GAC9B,OAAO,yBACCC,GAAG,mBACHC,MAAO,CACLC,MAAOH,EAAMG,MAAQH,EAAMG,MAAQ,QACnCC,OAAQJ,EAAMI,OAASJ,EAAMI,OAAS,aA8DnCC,E,4LAzDQ,IAAD,OACdC,EACF,6GAEEC,EAAK,6CACLC,EAAKC,MAAMH,GAAKI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAEpCC,QAAQC,IAAI,CAACP,EAAIC,IAAKE,MAAK,SAAAK,GACzB,IAAIC,EAASD,EAAK,GACdE,EAAYF,EAAK,GACjBG,EAAa,EAAKlB,MAAMmB,uBAE5B,EAAKH,OAASA,EAEd,IAAII,EAAW,EAAKJ,OAAOK,IAAIC,MAAM,kBACjCC,EAAQ,EAAKP,OAAOQ,OAAOC,YAAYP,EAAY,OAAQE,GAE/D,EAAKJ,OAAOU,UAAUd,KAAKe,aAAaC,sBAAsB,CAC5DC,UAAU,EACVC,QAAS,CACP,CACEC,IAAKzB,EACL0B,UAAW,CAACZ,EAASa,YACrBC,OAAQjB,MAKd,EAAKO,OAAS,EAAKR,OAAOQ,OAAOW,OAC/BC,SAASC,eAAe,oBACxB,CACEC,MAAOpB,EACPqB,SAAU,OACVhB,MAAOA,IAIX,EAAKA,MAAQA,O,yCAMEiB,GACjBC,KAAKjB,OAAOkB,SAASD,KAAKzC,MAAMmB,0B,+BAKhC,OACE,8BACE,kBAAC,EAAD,CAAiBwB,UAAU,uB,GApDRC,aCeVC,E,qLAzBAC,EAAKC,GAChB,IAAIC,EAAOD,EAAaD,GAAb,aACX,OAAIL,KAAKzC,MAAMiD,kBAAoBH,EAC1B,4BAAQR,MAAOQ,EAAKI,UAAQ,GAAEF,GAE9B,4BAAQV,MAAOQ,GAAME,K,+BAItB,IAAD,OAEHD,EAAeN,KAAKzC,MAAMmD,qBAC1BC,EAAOC,OAAOD,KAAKX,KAAKzC,MAAMmD,sBAClC,OACE,6BACE,2BAAOG,QAAQ,WAAf,6BACA,4BAASC,SAAUd,KAAKzC,MAAMuD,UAC3BH,EAAKI,KAAI,SAAAV,GAAG,OAAI,EAAKW,aAAaX,EAAKC,Y,GAnBvBH,aCUdc,E,YATX,WAAY1D,GAAQ,qEACVA,I,sEAIR,OAAO,6BAAMyC,KAAKzC,MAAM2D,e,GANNC,IAAMhB,WCFf,GACX,KAAQ,CACJ,YAAe,OACf,aAAgB,YAChB,oBAAuB,CACnB,UAAa,cACb,eAAkB,EAClB,mBAAsB,CAClB,SAAY,gBAIxB,KAAQ,CACJ,YAAe,OACf,aAAgB,YAChB,oBAAuB,CACnB,UAAa,eCwBViB,E,YA9BX,WAAY7D,GAAQ,IAAD,uBACf,4CAAMA,KAYV8D,aAAe,SAACC,GACZ,IAAIC,EAAcD,EAAME,OAAO3B,MAC/B,EAAK4B,SAAS,CAACC,iBAAkBH,KAflB,OAGf,EAAKI,MAAQ,CAACD,iBADa,QAE3B,EAAKL,aAAe,EAAKA,aAAaO,KAAlB,gBAJL,E,2EAOLpE,GACZ,IAAIqE,EAAgBnB,EAAqBlD,GAArB,oBAEpB,OADoBsE,KAAKC,UAAUF,EAAe,KAAM,K,+BAWxD,IAAIG,EAAchC,KAAKiC,cAAcjC,KAAK2B,MAAMD,kBAEhD,OAAO,6BACH,kBAAC,EAAD,CAAgBZ,SAAUd,KAAKqB,aAAcX,qBAAsBA,EAAsBF,gBAAiBR,KAAK2B,MAAMD,mBACrH,kBAAC,EAAD,CAAWQ,iBAAkBlC,KAAK2B,MAAMT,YACxC,kBAAC,EAAD,CAAcxC,uBAAwBsD,S,GA3B9Bb,IAAMhB,WCHxBgC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAASC,eAAe,W","file":"static/js/main.914212cf.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport * as monaco from 'monaco-editor'\n\n\n\nexport const EditorContainer = (props) => {\n  return <div\n          id=\"editor-container\"\n          style={{\n            width: props.width ? props.width : \"500px\",\n            height: props.height ? props.height : \"500px\",\n          }}></div>\n};\n\nclass MonacoWindow extends Component {\n  componentDidMount() {\n    let url =\n      \"https://raw.githubusercontent.com/moj-analytical-services/splink/dev/splink/files/settings_jsonschema.json\"\n\n    let p1 = import(\"monaco-editor\")\n    let p2 = fetch(url).then(res => res.json())\n\n    Promise.all([p1, p2]).then(data => {\n      let monaco = data[0]\n      let my_schema = data[1]\n      let text_value = this.props.editor_contents_string\n\n      this.monaco = monaco\n\n      var modelUri = this.monaco.Uri.parse(\"a://b/foo.json\") // a made up unique URI for our model\n      var model = this.monaco.editor.createModel(text_value, \"json\", modelUri)\n\n      this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        schemas: [\n          {\n            uri: url, // id of the first schema\n            fileMatch: [modelUri.toString()], // associate with our model\n            schema: my_schema\n          },\n        ],\n      })\n\n      this.editor = this.monaco.editor.create(\n        document.getElementById(\"editor-container\"),\n        {\n          value: text_value,\n          language: \"json\",\n          model: model\n        }\n      )\n\n      this.model = model\n\n\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    this.editor.setValue(this.props.editor_contents_string)\n\n  }\n\n  render() {\n    return (\n      <span>\n        <EditorContainer className=\"monaco-window\" />\n      </span>\n    )\n  }\n}\n\nexport default MonacoWindow","import React, { Component } from 'react';\n\nclass SelectSettings extends Component {\n\n    renderOption(key, all_settings) {\n      let text = all_settings[key][\"example_name\"]\n      if (this.props.selected_option === key) {\n        return <option value={key} selected>{text}</option>\n      } else {\n        return <option value={key}>{text}</option>\n      }\n    }\n\n    render() {\n\n      let all_settings = this.props.all_example_settings\n      let keys = Object.keys(this.props.all_example_settings)\n      return (\n        <div>\n          <label htmlFor=\"select1\" >Select example settings: </label>\n          <select  onChange={this.props.onChange}>\n            {keys.map(key => this.renderOption(key, all_settings))}\n          </select>\n\n        </div>\n      )\n    }\n  }\n\n  export default SelectSettings","import React, { Component } from 'react';\n\nclass InfoPanel extends React.Component {\n    constructor(props) {\n        super(props);\n      }\n\n    render() {\n      return <div>{this.props.selection}</div>;\n    }\n  }\n\nexport default InfoPanel","export default {\n    \"id_1\": {\n        \"settings_id\": \"id_1\",\n        \"example_name\": \"example 1\",\n        \"settings_dictionary\": {\n            \"link_type\": \"dedupe_only\",\n            \"max_iterations\": 2,\n            \"comparison_columns\": {\n                \"col_name\": \"first_name\"\n            }\n        }\n    },\n    \"id_2\": {\n        \"settings_id\": \"id_2\",\n        \"example_name\": \"example 2\",\n        \"settings_dictionary\": {\n            \"link_type\": \"link_only\"\n        }\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\n\nimport MonacoWindow from \"./components/MonacoWindow\"\nimport SelectSettings from \"./components/SelectSettings\"\nimport InfoPanel from \"./components/InfoPanel\"\nimport all_example_settings from \"./data/all_example_settings.js\"\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const initial_example_id = \"id_1\"\n        this.state = {option_selection: initial_example_id}\n        this.handleChange = this.handleChange.bind(this);\n      }\n\n    getTextFromId(id) {\n      let settings_dict = all_example_settings[id][\"settings_dictionary\"]\n      let settings_text = JSON.stringify(settings_dict, null, 4)\n      return settings_text\n    }\n\n    handleChange = (event) => {\n        let settings_id = event.target.value\n        this.setState({option_selection: settings_id})\n    }\n\n    render() {\n\n      let editor_text = this.getTextFromId(this.state.option_selection)\n\n      return <div>\n          <SelectSettings onChange={this.handleChange} all_example_settings={all_example_settings} selected_option={this.state.option_selection}/>\n          <InfoPanel select_select_id={this.state.selection} />\n          <MonacoWindow editor_contents_string={editor_text}/>\n      </div>;\n    }\n  }\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}