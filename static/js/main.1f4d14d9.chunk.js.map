{"version":3,"sources":["md lazy /^/.//.*/.md$/ groupOptions: {} namespace object","components/MonacoWindow.js","components/SelectSettings.js","components/InfoPanel.js","data/all_example_settings.js","App.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","EditorContainer","props","style","width","height","MonacoWindow","url","fetch","res","json","data","my_schema","text_value","editor_contents_string","monaco","modelUri","Uri","parse","model","editor","createModel","languages","jsonDefaults","setDiagnosticsOptions","validate","schemas","uri","fileMatch","toString","schema","create","document","getElementById","value","language","prevProps","this","setValue","className","React","Component","SelectSettings","key","all_settings","text","all_example_settings","htmlFor","onChange","defaultValue","selected_option","renderOption","InfoPanel","state","md","_loadAsyncData","select_id","source","_asyncRequest","f","default","r","setState","prev_select_id","App","option_selection","handleChange","event","settings_id","target","bind","settings_dict","JSON","stringify","editor_text","getTextFromId","ReactDOM","render"],"mappings":"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","file":"static/js/main.1f4d14d9.chunk.js","sourcesContent":["var map = {\n\t\"./id_1.md\": [\n\t\t547,\n\t\t67\n\t],\n\t\"./id_2.md\": [\n\t\t548,\n\t\t68\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 484;\nmodule.exports = webpackAsyncContext;","import React from 'react';\nimport * as monaco from 'monaco-editor'\n\n\n\nexport const EditorContainer = (props) => {\n  return <div\n          id=\"editor-container\"\n          style={{\n            width: props.width ? props.width : \"500px\",\n            height: props.height ? props.height : \"500px\",\n          }}></div>\n};\n\nclass MonacoWindow extends React.Component {\n  componentDidMount() {\n    let url =\n      \"https://raw.githubusercontent.com/moj-analytical-services/splink/master/splink/files/settings_jsonschema.json\"\n\n    let p1 = fetch(url).then(res => res.json())\n\n    p1.then(data => {\n\n      let my_schema = data\n      let text_value = this.props.editor_contents_string\n\n      this.monaco = monaco\n\n      var modelUri = this.monaco.Uri.parse(\"a://b/foo.json\") // a made up unique URI for our model\n      var model = this.monaco.editor.createModel(text_value, \"json\", modelUri)\n\n      this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        schemas: [\n          {\n            uri: url, // id of the first schema\n            fileMatch: [modelUri.toString()], // associate with our model\n            schema: my_schema\n          },\n        ],\n      })\n\n      this.editor = this.monaco.editor.create(\n        document.getElementById(\"editor-container\"),\n        {\n          value: text_value,\n          language: \"json\",\n          model: model\n        }\n      )\n\n      this.model = model\n\n\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    this.editor.setValue(this.props.editor_contents_string)\n\n  }\n\n  render() {\n    return (\n      <span>\n        <EditorContainer className=\"monaco-window\" />\n      </span>\n    )\n  }\n}\n\nexport default MonacoWindow","import React, { Component } from 'react';\n\nclass SelectSettings extends Component {\n\n    renderOption(key, all_settings) {\n      let text = all_settings[key][\"example_name\"]\n      return <option key={key} value={key}>{text}</option>\n    }\n\n    render() {\n\n      let all_settings = this.props.all_example_settings\n      let keys = Object.keys(this.props.all_example_settings)\n      return (\n        <div>\n          <label htmlFor=\"select1\" >Select example settings: </label>\n          <select  onChange={this.props.onChange} defaultValue={this.props.selected_option}>\n            {keys.map(key => this.renderOption(key, all_settings))}\n          </select>\n\n        </div>\n      )\n    }\n  }\n\n  export default SelectSettings","import React from 'react';\nimport ReactMarkdown from 'react-markdown'\n\nclass InfoPanel extends React.Component {\n\n  state = {\n    md: null\n  }\n\n\n  // This is a way of fetching data asyncronously when props change\n  // see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data-when-props-change\n  static getDerivedStateFromProps(props, state) {\n\n    if (props.select_id !== state.prev_select_id) {\n      return {\n        md: null,\n        prev_select_id: props.select_id,\n      };\n    }\n\n    // No state update necessary\n    return null;\n  }\n\n\n\n  async componentDidMount() {\n    this._loadAsyncData(this.props.select_id)\n\n\n  }\n\n\n    async componentDidUpdate() {\n      if (this.state.md === null) {\n        this._loadAsyncData(this.props.select_id)\n      }\n\n    }\n\n    render() {\n      return <div>\n        <ReactMarkdown source={this.state.md}/>\n        {this.props.select_id}</div>;\n    }\n\n    _loadAsyncData(id) {\n      this._asyncRequest = import(`../md/${id}.md`).then(f => {\n        return fetch(f.default)}\n      ).then(r => {\n        return r.text()\n      }\n        ).then(t => {\n          this._asyncRequest = null;\n          this.setState({md:t});\n        })\n\n\n\n    }\n\n\n  }\n\nexport default InfoPanel","export default {\n    \"id_2\": {\n        \"settings_id\": \"id_2\", \n        \"example_name\": \"example 2\", \n        \"settings_dictionary\": {\n            \"link_type\": \"link_only\"\n        }\n    }, \n    \"id_1\": {\n        \"settings_id\": \"id_1\", \n        \"example_name\": \"Example 1\", \n        \"settings_dictionary\": {\n            \"comparison_columns\": {\n                \"col_name\": \"first_name\"\n            }, \n            \"link_type\": \"dedupe_only\", \n            \"max_iterations\": 2\n        }\n    }\n}","import React from 'react';\nimport './App.css';\n\nimport MonacoWindow from \"./components/MonacoWindow\"\nimport SelectSettings from \"./components/SelectSettings\"\nimport InfoPanel from \"./components/InfoPanel\"\nimport all_example_settings from \"./data/all_example_settings.js\"\n\nclass App extends React.Component {\n\n    state = {\n      option_selection: \"id_1\"\n    }\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n\n    getTextFromId(id) {\n      let settings_dict = all_example_settings[id][\"settings_dictionary\"]\n      let settings_text = JSON.stringify(settings_dict, null, 4)\n      return settings_text\n    }\n\n    handleChange = (event) => {\n        let settings_id = event.target.value\n        this.setState({option_selection: settings_id})\n    }\n\n    render() {\n\n      let editor_text = this.getTextFromId(this.state.option_selection)\n\n      return <div>\n          <SelectSettings onChange={this.handleChange} all_example_settings={all_example_settings} selected_option={this.state.option_selection}/>\n          <InfoPanel select_id={this.state.option_selection} />\n          <MonacoWindow editor_contents_string={editor_text}/>\n      </div>;\n    }\n  }\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}