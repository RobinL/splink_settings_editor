{"version":3,"sources":["md lazy /^/.//.*/.md$/ groupOptions: {} namespace object","components/MonacoWindow.js","components/SelectSettings.js","components/InfoPanel.js","components/Header.js","data/all_example_settings.js","App.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","EditorContainer","props","style","width","ErrorContainer","errors","length","background","error","MonacoWindow","state","prevHeight","updateEditorHeight","editorElement","editor","getDomNode","lineHeight","getOption","monaco","EditorOption","lineCount","getModel","getLineCount","height","getTopForLineNumber","layout","url","fetch","res","json","data","my_schema","text_value","editor_contents_string","modelUri","Uri","parse","model","createModel","languages","jsonDefaults","setDiagnosticsOptions","validate","schemas","uri","fileMatch","toString","schema","create","document","getElementById","value","automaticLayout","language","scrollbar","vertical","handleMouseWheel","scrollBeyondLastLine","minimap","enabled","theme","insertSpaces","onDidChangeModelDecorations","owner","getModeId","markers","getModelMarkers","forEach","d","mes","message","line","startLineNumber","push","setState","prevProps","option_selection","this","setValue","className","React","Component","SelectSettings","key","all_settings","text","all_example_settings","options","k","label","selected_option","onChange","InfoPanel","md","_loadAsyncData","select_id","source","_asyncRequest","f","default","r","prev_select_id","Header","stAnnesTheme","typography","Typography","injectStyles","injectFonts","App","handleChange","event","settings_id","bind","settings_dict","JSON","stringify","editor_text","getTextFromId","ReactDOM","render"],"mappings":"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","file":"static/js/main.1431c964.chunk.js","sourcesContent":["var map = {\n\t\"./id_1.md\": [\n\t\t555,\n\t\t67\n\t],\n\t\"./id_2.md\": [\n\t\t556,\n\t\t68\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 490;\nmodule.exports = webpackAsyncContext;","import React from 'react';\nimport * as monaco from 'monaco-editor'\n\n\n\nconst EditorContainer = (props) => {\n  return <div\n          id=\"editor-container\"\n          style={{width:\"700px\"\n\n          }}></div>\n};\n\nconst ErrorContainer = (props) => {\n  if (props.errors.length === 0) {\n    return (\n      <div  style={{background: \"#bcfbb8\"}}>\n        The above settings object is VALID\n        </div>\n    )\n  } else {\n    return (\n    <div style={{background: \"#fbb8b8\"}}>\n      The above settings object contains the following errors:\n      {props.errors.map(error => <li>{error}</li>)}\n    </div>)\n  }\n\n\n};\n\n\n\nclass MonacoWindow extends React.Component {\n\n  state = {\n    \"errors\": []\n  }\n\n\n\n  componentDidMount() {\n    let url =\n      \"https://raw.githubusercontent.com/moj-analytical-services/splink/master/splink/files/settings_jsonschema.json\"\n\n    let p1 = fetch(url).then(res => res.json())\n\n    p1.then(data => {\n\n      let my_schema = data\n      let text_value = this.props.editor_contents_string\n\n      this.monaco = monaco\n\n      var modelUri = this.monaco.Uri.parse(\"a://b/foo.json\") // a made up unique URI for our model\n      var model = this.monaco.editor.createModel(text_value, \"json\", modelUri)\n\n      this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        schemas: [\n          {\n            uri: url, // id of the first schema\n            fileMatch: [modelUri.toString()], // associate with our model\n            schema: my_schema\n          },\n        ],\n      })\n\n      this.editor = this.monaco.editor.create(\n        document.getElementById(\"editor-container\"),\n        {\n          value: text_value,\n          automaticLayout: false,\n          language: \"json\",\n          model: model,\n          scrollbar: {\n            vertical: \"hidden\",\n            handleMouseWheel: false\n          },\n          scrollBeyondLastLine: false,\n          minimap: {\n            enabled: false\n          },\n          theme:\"vs-dark\",\n          insertSpaces: true\n        }\n      )\n\n      this.model = model\n\n      this.editor.onDidChangeModelDecorations(() => {\n\n        const model = this.editor.getModel();\n        this.updateEditorHeight()\n\n        const owner = model.getModeId();\n        const markers = monaco.editor.getModelMarkers({ owner });\n\n\n        let errors = []\n        markers.forEach(d => {\n          let mes = d.message\n          let line = d.startLineNumber\n           mes = `Error: ${mes} at line ${line}`\n          errors.push(mes)\n        })\n\n        this.setState({\"errors\": errors})\n\n      });\n\n\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.option_selection !== this.props.option_selection) {\n      this.editor.setValue(this.props.editor_contents_string)\n    }\n\n  }\n\n  prevHeight = 0\n\n  updateEditorHeight = () => {\n    const editorElement = this.editor.getDomNode()\n\n    if (!editorElement) {\n      return\n    }\n\n    const lineHeight = this.editor.getOption(monaco.editor.EditorOption.lineHeight)\n    const lineCount = this.editor.getModel()?.getLineCount() || 1\n    const height = this.editor.getTopForLineNumber(lineCount + 1) + lineHeight\n\n    if (this.prevHeight !== height) {\n      this.prevHeight = height\n      editorElement.style.height = `${height}px`\n      this.editor.layout()\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You can use ctrl+space to autocomplete fields, and ctrl+shift+f to format the document</p>\n\t      <p>Hover over fields to get a description of their purpose</p>\n        <EditorContainer className=\"monaco-window\" />\n        <ErrorContainer errors={this.state.errors}/>\n      </div>\n    )\n  }\n}\n\nexport default MonacoWindow","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass SelectSettings extends Component {\n\n    renderOption(key, all_settings) {\n      let text = all_settings[key][\"example_name\"]\n      return <option key={key} value={key}>{text}</option>\n    }\n\n    render() {\n\n      let all_settings = this.props.all_example_settings\n      let keys = Object.keys(this.props.all_example_settings)\n      let options = keys.map(k => { return {value: k, label: all_settings[k][\"example_name\"] }})\n\n      let k = this.props.selected_option\n      let value = {value: k, label: all_settings[k][\"example_name\"]}\n      return (\n        <div>\n          <Select options={options}  onChange={this.props.onChange} value={value}/>\n        </div>\n      )\n    }\n  }\n\n  export default SelectSettings","import React from 'react';\nimport ReactMarkdown from 'react-markdown'\n\nclass InfoPanel extends React.Component {\n\n  state = {\n    md: null\n  }\n\n\n  // This is a way of fetching data asyncronously when props change\n  // see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data-when-props-change\n  static getDerivedStateFromProps(props, state) {\n\n    if (props.select_id !== state.prev_select_id) {\n      return {\n        md: null,\n        prev_select_id: props.select_id,\n      };\n    }\n\n    // No state update necessary\n    return null;\n  }\n\n\n\n  async componentDidMount() {\n    this._loadAsyncData(this.props.select_id)\n\n\n  }\n\n\n    async componentDidUpdate() {\n      if (this.state.md === null) {\n        this._loadAsyncData(this.props.select_id)\n      }\n\n    }\n\n    render() {\n      return <div>\n\n        <ReactMarkdown source={this.state.md}/>\n        <p>Notes:</p>\n        <p>Where the user does not explicitly provide settings, splink will fall back on sensible default values.</p>\n        </div>;\n    }\n\n    _loadAsyncData(id) {\n      this._asyncRequest = import(`../md/${id}.md`).then(f => {\n        return fetch(f.default)}\n      ).then(r => {\n        return r.text()\n      }\n        ).then(t => {\n          this._asyncRequest = null;\n          this.setState({md:t});\n        })\n\n\n\n    }\n\n\n  }\n\nexport default InfoPanel","import React from 'react';\n\nfunction Header(props) {\n    return <div>\n        <h1>splink settings examples and editor</h1>\n    <p>Use the editor below to create a <code>splink</code> settings dictionary, or load one of our examples:</p>\n\n\n    </div>;\n  }\n\n  export default Header","export default {\n    \"id_2\": {\n        \"settings_id\": \"id_2\", \n        \"example_name\": \"example 2\", \n        \"settings_dictionary\": {\n            \"link_type\": \"link_only\"\n        }\n    }, \n    \"id_1\": {\n        \"settings_id\": \"id_1\", \n        \"example_name\": \"Example 1: Basic dedupe template\", \n        \"settings_dictionary\": {\n            \"comparison_columns\": [\n                {\n                    \"num_levels\": 3, \n                    \"term_frequency_adjustments\": true, \n                    \"col_name\": \"first_name\"\n                }, \n                {\n                    \"num_levels\": 3, \n                    \"term_frequency_adjustments\": true, \n                    \"col_name\": \"surname\"\n                }, \n                {\n                    \"col_name\": \"dob\"\n                }, \n                {\n                    \"col_name\": \"city\"\n                }, \n                {\n                    \"col_name\": \"email\"\n                }\n            ], \n            \"blocking_rules\": [\n                \"l.first_name = r.first_name\", \n                \"l.surname = r.surname\", \n                \"l.dob = r.dob\"\n            ], \n            \"link_type\": \"dedupe_only\", \n            \"additional_columns_to_retain\": [\n                \"group\"\n            ]\n        }\n    }\n}","import React from 'react';\nimport './App.css';\n\nimport MonacoWindow from \"./components/MonacoWindow\"\nimport SelectSettings from \"./components/SelectSettings\"\nimport InfoPanel from \"./components/InfoPanel\"\nimport Header from \"./components/Header\"\nimport all_example_settings from \"./data/all_example_settings.js\"\n\nimport Typography from 'typography'\nimport stAnnesTheme from 'typography-theme-st-annes'\nimport injectFonts from 'typography-inject-fonts'\n\nconst theme = stAnnesTheme\nconst typography = new Typography(theme)\ntypography.injectStyles()\ninjectFonts(typography)\n\n\nclass App extends React.Component {\n\n    state = {\n      option_selection: \"id_1\"\n    }\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n\n    getTextFromId(id) {\n      let settings_dict = all_example_settings[id][\"settings_dictionary\"]\n      let settings_text = JSON.stringify(settings_dict, null, 4)\n      return settings_text\n    }\n\n    handleChange = (event) => {\n\n        let settings_id = event.value\n        this.setState({option_selection: settings_id})\n    }\n\n    render() {\n\n      let editor_text = this.getTextFromId(this.state.option_selection)\n\n      return <div className=\"App-main-div\">\n          <Header/>\n\n          <SelectSettings onChange={this.handleChange} all_example_settings={all_example_settings} selected_option={this.state.option_selection}/>\n          <div className=\"App-flex-container\">\n            <div className=\"App-flex-item\">\n              <h2>Code editor</h2>\n            <MonacoWindow editor_contents_string={editor_text}  option_selection={this.state.option_selection}/>\n            </div>\n            <div className=\"App-flex-item\">\n            <InfoPanel select_id={this.state.option_selection} />\n            </div>\n          </div>\n      </div>;\n    }\n  }\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}